@model MvcMovie.ViewModels.MovieGenreViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>
<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-controller="Movies" asp-action="Index" method="get">
    <p>
        <select id="movieGenre" asp-for="MovieGenre" asp-items="Model.Genres">
            <option value="All">All</option>
        </select>

        Title: <input type="text" id="searchString" asp-for="SearchString" />
        <input type="submit" value="Filter" />
        <button type="button" id="resetFiltersBtn" class="btn btn-secondary">Reset Filter</button>
        <button type="button" id="updatePriceBtn" class="btn btn-primary">Update Price</button>

    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <input type="checkbox" id="selectAllCheckbox">
            </th>
            <th>
                <a asp-action="Index" asp-route-movieGenre="@Model.MovieGenre" asp-route-searchString="@Model.SearchString" asp-route-currentSort="@ViewBag.TitleSortParam">Title</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-movieGenre="@Model.MovieGenre" asp-route-searchString="@Model.SearchString" asp-route-currentSort="@ViewBag.DateSortParam">Release Date</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-movieGenre="@Model.MovieGenre" asp-route-searchString="@Model.SearchString" asp-route-currentSort="@ViewBag.GenreSortParam">Genre</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-movieGenre="@Model.MovieGenre" asp-route-searchString="@Model.SearchString" asp-route-currentSort="@ViewBag.PriceSortParam">Price</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-movieGenre="@Model.MovieGenre" asp-route-searchString="@Model.SearchString" asp-route-currentSort="@ViewBag.RatingSortParam">Rating</a>
            </th>

        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model.Movies)
        {
             <tr>
                <td><input type="checkbox" class="movieCheckbox" data-movie-id="@item.Id" /></td>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.ReleaseDate)</td>
                <td>@Html.DisplayFor(modelItem => item.Genre)</td>
                <td>@Html.DisplayFor(modelItem => item.Price)</td>
                <td>@Html.DisplayFor(modelItem => item.Rating)</td>
                <td style="display: flex; gap: 10px;">
                    <button type="button" class="btn btn-primary editButton" data-toggle="modal" data-target="#editModal" data-url="@Url.Action("Edit", "Movies", new { id = item.Id })">Edit</button>
                    <button type="button" class="btn btn-primary detailsButton" data-toggle="modal" data-target="#detailsModal" data-url="@Url.Action("Details", "Movies", new { id = item.Id })">Details</button>
                    <form action="/Movies/Delete/@item.Id" method="post">
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </td>
            </tr> 
        }
    </tbody>
</table>
@{
    if (Model.Movies.Count > 0)
    {
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    @if (Model.Movies.HasPreviousPage)
                {
                        <li class="page-item">
                            <a class="page-link" asp-controller="Movies" asp-action="Index" asp-route-movieGenre="@Model.MovieGenre"
                               asp-route-searchString="@Model.SearchString" asp-route-sortOrder="@Model.CurrentSort"
                               asp-route-pageNumber="@(Model.Movies.PageIndex - 1)">Previous</a>
                        </li>
                }
                    @for (int i = 1; i <= Model.Movies.TotalPages; i++)
                {
                        <li class="page-item @(i == Model.Movies.PageIndex ? "active" : "")">
                            <a class="page-link" asp-controller="Movies" asp-action="Index" asp-route-movieGenre="@Model.MovieGenre"
                               asp-route-searchString="@Model.SearchString" asp-route-sortOrder="@Model.CurrentSort"
                               asp-route-pageNumber="@i">@i</a>
                        </li>
                }
                    @if (Model.Movies.HasNextPage)
                {
                        <li class="page-item">
                            <a class="page-link" asp-controller="Movies" asp-action="Index" asp-route-movieGenre="@Model.MovieGenre"
                               asp-route-searchString="@Model.SearchString" asp-route-sortOrder="@Model.CurrentSort"
                               asp-route-pageNumber="@(Model.Movies.PageIndex + 1)">Next</a>
                        </li>
                }
                </ul>
            </nav>
    }
}
<div>
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Movie</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                </div>
                    <div class="modal-footer">
                        <button type="button" id="saveButton" class="btn btn-primary">Save</button>
                    </div>
                </div>
            </div>
        </div>

    <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Movie Details</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                </div>
               
            </div>
        </div>
    </div>
 </div>

<!--Update Price Modal-->
<div class="modal fade" id="updatePriceModal" tabindex="-1" aria-labelledby="updatePriceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updatePriceModalLabel">Update Price</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="selectedMoviesList"></div>
                <input type="number" id="newPrice" placeholder="New Price" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="updatePriceSubmit">Update Price</button>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script>
        $(document).ready(function () {

                document.getElementById('resetFiltersBtn').addEventListener('click', function () {
                window.location.href = '/Movies/Index?resetFilters=true';
            });

            $('.editButton').click(function (event) {
                event.preventDefault();
                var editUrl = $(this).data('url');
                console.log(editUrl);
                $('#editModal .modal-body').load(editUrl, function () {
                    $('#editModal').modal('show');
                });
            });

            $("#saveButton").click(function (event) {
                event.preventDefault();
                var formData = {
                    Id: $("#Id").val(),
                    Title: $("#Title").val(),
                    ReleaseDate: $("#ReleaseDate").val(),
                    Genre: $("#Genre").val(),
                    Price: $("#Price").val(),
                    Rating: $("#Rating").val()
                };
                var movieId = $("#Id").val();
                console.log(formData);
                $.ajax({
                    type: "POST",
                    url: "/Movies/Edit/" + movieId,
                    data: formData,
                    success: function (response) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Movie updated successfully!',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/Movies/Index';
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);
                    }
                });
            });

            $('.detailsButton').click(function (event) {
                event.preventDefault();
                var detailsUrl = $(this).data('url');
                $('#detailsModal .modal-body').load(detailsUrl, function () {
                    $('#detailsModal').modal('show');
                });
            });

            let isSelectAll = JSON.parse(localStorage.getItem('isSelectAll')) || false;

            function updateSelectedMovies(movieId, movieTitle, isSelected) {
                let selectedMovies = JSON.parse(localStorage.getItem('selectedMovies')) || [];
                if (isSelected) {
                    if (!selectedMovies.some(movie => movie.id === movieId)) {
                        selectedMovies.push({ id: movieId, title: movieTitle });
                    }
                } else {
                    selectedMovies = selectedMovies.filter(movie => movie.id !== movieId);
                }
                localStorage.setItem('selectedMovies', JSON.stringify(selectedMovies));
                updateSelectedMoviesDisplay();
            }

            function refreshCheckboxStates() {
                let selectedMovies = JSON.parse(localStorage.getItem('selectedMovies')) || [];
                $('.movieCheckbox').each(function () {
                    const movieId = $(this).data('movie-id');
                    $(this).prop('checked', selectedMovies.some(movie => movie.id === movieId));
                });

                $('#selectAllCheckbox').prop('checked', isSelectAll);
            }

            refreshCheckboxStates();

            $('.movieCheckbox').change(function () {
                const movieId = $(this).data('movie-id');
                const movieTitle = $(this).closest('tr').find('td:eq(1)').text();
                updateSelectedMovies(movieId, movieTitle, $(this).is(':checked'));

                if (!$(this).is(':checked')) {
                    $('#selectAllCheckbox').prop('checked', false);
                    isSelectAll = false;
                    localStorage.setItem('isSelectAll', JSON.stringify(isSelectAll));
                }
            });

            $('#selectAllCheckbox').change(function () {
                const isSelected = $(this).is(':checked');
                isSelectAll = isSelected;
                localStorage.setItem('isSelectAll', JSON.stringify(isSelectAll));

                if (isSelected) {
                    const movieGenre = $('#movieGenre').val();
                    const searchString = $('#searchString').val();

                    $.ajax({
                        type: 'GET',
                        url: '/Movies/GetFilteredMovieIds',
                        data: {
                            movieGenre: movieGenre,
                            searchString: searchString
                        },
                        success: function (response) {
                            let selectedMovies = JSON.parse(localStorage.getItem('selectedMovies')) || [];
                            response.forEach(movie => {
                                if (!selectedMovies.some(m => m.id === movie.id)) {
                                    selectedMovies.push({ id: movie.id, title: movie.title });
                                }
                            });
                            console.log(selectedMovies);
                            localStorage.setItem('selectedMovies', JSON.stringify(selectedMovies));
                            $('.movieCheckbox').each(function () {
                                $(this).prop('checked', true);
                            });
                            updateSelectedMoviesDisplay();
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                        }
                    });
                } else {
                    $('.movieCheckbox').each(function () {
                        $(this).prop('checked', false);
                    });
                    localStorage.setItem('selectedMovies', JSON.stringify([]));
                    updateSelectedMoviesDisplay();
                }
            });

            function updateSelectedMoviesDisplay() {
                let selectedMovies = JSON.parse(localStorage.getItem('selectedMovies')) || [];
                const movieGenre = $('#movieGenre').val();
                const searchString = $('#searchString').val();

                $('#selectedMoviesList').empty();

                if (isSelectAll && (movieGenre === "All" || movieGenre === "" || movieGenre === null) && (searchString === "" || searchString === null)) {
                    $('#selectedMoviesList').append('<div>ALL Movies</div>');
                } else {
                    selectedMovies.forEach(function (movie) {
                        $('#selectedMoviesList').append('<div>' + movie.title + '</div>');
                    });
                }
            }

            $('#updatePriceBtn').click(function () {
                let selectedMovies = JSON.parse(localStorage.getItem('selectedMovies')) || [];

                if (selectedMovies.length === 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'No movies selected!',
                    });
                    return;
                }

                updateSelectedMoviesDisplay();
                $('#updatePriceModal').modal('show');
            });

            $('#updatePriceSubmit').click(function () {
                var newPrice = $('#newPrice').val();
                let selectedMovies = JSON.parse(localStorage.getItem('selectedMovies')) || [];

                if (newPrice === '' || newPrice <= 0 || newPrice > 100) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Price',
                        text: 'Please enter a valid price between 1 and 100.',
                    });
                    return;
                }

                $.ajax({
                    type: 'POST',
                    url: '/Movies/UpdatePrice',
                    data: { movieIds: selectedMovies.map(movie => movie.id), newPrice: newPrice },
                    success: function (response) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Price updated successfully!',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                localStorage.removeItem('selectedMovies');
                                localStorage.removeItem('isSelectAll');
                                window.location.reload();
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });
            });

            $('#resetFiltersBtn').click(function () {
                window.location.href = '/Movies/Index?resetFilters=true';
            });
        });
    </script>
}


